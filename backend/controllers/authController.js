const authService = require('../services/authService');
const { OAuth2Client } = require('google-auth-library');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

// Kh·ªüi t·∫°o Google OAuth2 client
envClientCheck(); // ensure GOOGLE_CLIENT_ID is set
const client = new OAuth2Client(process.env.GOOGLE_CLIENT_ID);

// üîπ ƒêƒÇNG K√ù
const registerController = async (req, res) => {
  try {
    const { name, email, password } = req.body;
    // Validate ƒë·∫ßu v√†o
    if (!name || !email || !password) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!', code: 400 });
    }
    // G·ªçi service ƒëƒÉng k√Ω
    const result = await authService.registerService({ name, email, password });
    return res.status(result.code).json({
      message: result.message,
      code: result.code,
      data: result.data
    });
  } catch (err) {
    console.error('üöÄ ~ registerController ~ err:', err);
    return res.status(500).json({ message: 'L·ªói t·ª´ h·ªá th·ªëng', code: 500, data: null });
  }
};

// üîπ ƒêƒÇNG NH·∫¨P
const loginController = async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ message: 'Thi·∫øu email ho·∫∑c m·∫≠t kh·∫©u!', code: 400 });
    }
    const result = await authService.loginService({ email, password });
    return res.status(result.code).json({
      message: result.message,
      code: result.code,
      data: result.data,
      token: result.token
    });
  } catch (err) {
    console.error('üöÄ ~ loginController ~ err:', err);
    return res.status(500).json({ message: 'L·ªói t·ª´ h·ªá th·ªëng', code: 500, data: null });
  }
};

// üîπ ƒêƒÇNG NH·∫¨P QUA GOOGLE OAuth2
const googleLoginController = async (req, res) => {
  try {
    const { token } = req.body;
    if (!token) {
      return res.status(400).json({ message: 'Thi·∫øu token Google!', code: 400 });
    }
    // Verify token v·ªõi Google
    const ticket = await client.verifyIdToken({
      idToken: token,
      audience: process.env.GOOGLE_CLIENT_ID
    });
    const payload = ticket.getPayload(); // { email, name, sub, picture, ... }

    // T√¨m ho·∫∑c t·∫°o user
    let user = await User.findOne({ where: { email: payload.email } });
    if (!user) {
      user = await User.create({
        name: payload.name,
        email: payload.email,
        password: payload.sub,   // d√πng sub nh∆∞ m·∫≠t kh·∫©u t·∫°m
        role_id: 1
      });
    }

    // T·∫°o JWT c·ªßa ri√™ng b·∫°n
    const jwtToken = jwt.sign(
      { id: user.id, role: user.role_id },
      process.env.JWT_SECRET,
      { expiresIn: '1h' }
    );

    const { password: _, ...userData } = user.toJSON();
    return res.status(200).json({
      message: 'ƒêƒÉng nh·∫≠p b·∫±ng Google th√†nh c√¥ng',
      code: 200,
      data: userData,
      token: jwtToken
    });
  } catch (err) {
    console.error('üöÄ ~ googleLoginController ~ err:', err);
    return res.status(401).json({ message: 'X√°c th·ª±c Google th·∫•t b·∫°i', code: 401, data: null });
  }
};

module.exports = {
  registerController,
  loginController,
  googleLoginController
};

// Utility: ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng Google Client ID
envClientCheck();
function envClientCheck() {
  if (!process.env.GOOGLE_CLIENT_ID) {
    console.warn('‚ö†Ô∏è GOOGLE_CLIENT_ID ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong .env');
  }
}
